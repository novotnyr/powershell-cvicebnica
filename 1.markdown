---
title: Cvičebnica z Powershellu, časť 1
layout: page
---

Inštalácia
=========

**PowerShell 2.0** je automaticky dostupný vo Windows 7 a Windows 2008 R2. Pre staršie verzie Windowsu navštívte [http://support.microsoft.com/kb/968929](http://support.microsoft.com/kb/968929) a stiahnite *Windows Management Framework Core (WinRM 2.0 and Windows PowerShell 2.0)*.

Od septembra 2012 je k dispozícii **PowerShell 3.0** pre Windows 7 Service Pack 1, Windows Server 2008 R2 SP1, Windows Server 2008 Service Pack 2. 

V tomto tutoriále sa však stále budeme venovať verzii 2.0.

Úvodné úlohy
=============

Spustite PowerShell
-------------------

	Start | powershell.exe

Vyskúšajte vlastnosti kalkulačky, zrátajte (2 + 3) * 10.
-------------

	(2 + 3) * 10

Zistite, akú verziu PowerShellu používate.
------------------------------------------

	Get-Host

Príkazy nerozlišujú veľké a malé písmena.

<div markdown="1" class="alternative-solution">
Podobnú informáciu obsahuje aj premenná `$PSVersionTable`.
</div>

Spustite Powershell 2.0
-----------------------
Na moderných Windowsoch sa automaticky spúšťa najnovší Powershell. Na zachovanie spätnej kompatibility môžete explicitne spustiť konkrétnu verziu.

	powershell -version 2.0

Overte následne spustenú verziu.

Spustite Prieskumníka
---------------------

	explorer

alebo

	explorer.exe

Možno spúšťať bežné programy, ktoré sú dostupné v systéme.

Zistite, v ktorom adresári sa práve nachádzate.
-----------
Zistiť to môžeme pohľadom na výzvu (prompt).

	PS C:\Users\rn>

Zistite, v ktorom adresári sa práve nachádzate pomocou `pwd`.
-------------------------

	pwd

Zobrazte súbory a adresáre v aktuálnom podadresári pomocou `ls`.
------------------------
	
	ls

Zobrazte súbory a adresáre v aktuálnom podadresári pomocou `dir`.
------------------------

	dir

Zobrazte súbory a adresáre v aktuálnom podadresári pomocou `Get-ChildItem`.
------------------------

	Get-ChildItem

Zistite všetky alternatívne názvy pre výpis súborov a adresárov
-------------------

	alias dir

alebo

	alias ls

PowerShell neraz definuje pre jeden príkaz viacero alternatívnych názvov. Zabudovaný príklad PowerShellu sa nazýva **cmdlet** (commandlet): príkladom je `Get-ChildItem`, ktorý má aliasy `dir` aj `ls`.

Preštudujte dokumentáciu k `ls` / `dir` / `Get-ChildItem`
------------------------
	
	man ls

alebo

	man dir

alebo 

	man Get-ChildItem

alebo 

	help Get-ChildItem

Skúste tiež

	man man

Príklady môžete získať cez:

	man ls -examples

Zobrazte len názvy súborov či adresárov v aktuálnom adresári.
------------------------------------------------------------

	ls –Name

Názvy parametrov možno skrátiť, pokiaľ nedôjde k nejednoznačnostiam.
	
	ls -n

Zapíšte názvy súborov a adresárov do externého súboru.
--------------

	ls -n > subory.txt

Výstup ľubovoľného cmdletu možno zapísať do textového súboru použitím presmerovania cez `>`.

Overte existenciu súboru `subory.txt`
--------------

	ls subory.txt

Alternatívne pomocou cmdletu `Get-Item`˛

	Get-Item subory.txt

Alternatívne pomocou cmdletu `gi`, aliasu pre `Get-Item`

	gi subory.txt

Otvorte `subory.txt` v textovom editore
---------------

	notepad subory.txt

Pohyb v prostredí
------------------
* Šípky hore a šípky dole sa pohybujú po histórii príkazov
* Tabulátor realizuje automatické dopĺňanie.
* Kliknutím myši a ťahaním môžete vybrať text a pravým klikom ho skopírovať do schránky.
* cmdlet `cls` / `Clear-Host` zmaže obrazovku.


Adresáre
=========

Vypíšte obsah vlastného domovského adresára.
----------
Ak ste v domovskom adresári, tak:

	ls

Presun do domovského adresára:
	
	cd ~

A následne:
	
	ls

Alternatívne z ľubovoľného adresára
	
	ls ~

Vlnka `~` je skratka pre cestu do domovského adresára.

Vypíšte všetky súbory a adresáre v `C:/Users`
------

	ls C:/Users

Vypíšte všetky súbory a adresáre v `C:/Users`, ktoré sa začínajú na „P“.

Možnosť 1:

	cd C:\Users
	ls P*

Možnosť 2:

	ls C:\Users\P*

Vypíšte všetky súbory typu XML v domovskom adresári.
----------

	ls ~ *.xml

Alebo (ak sme v domovskom adresári):

	ls *.xml

Vypíšte všetky súbory v domovskom adresári a vo všetkých jeho podadresároch.
---------------------------------

	ls –Recurse

alebo
	
	ls -r

Vypíšte všetky XML súbory v domovskom adresári a vo všetkých jeho podadresároch.
------------------------------------------
Pozor! Pokus o 

	ls *.xml –r

nepovedie k výsledku! Prvým nepomenovaným argumentom musí byť aktuálny adresár, druhým je filter. Korektný príkaz je 

	ls ~ *.xml -r

čo je skrátenina pre

	ls -Path . -Filter *.xml -Recurse 

Ak sa nachádzame v domovskom adresári, potom:

	ls . *.xml –r

(Prvý parameter je bodka, druhý filter)


Vypíšte len plochý zoznam súborov z predošlej úlohy
----------------
	
	ls ~ *.xml -Recurse -Name

Spočítajte, koľko je súborov z predošlej úlohy
-----
Vystavajme rúru a výsledok z `ls` pošlime do cmdletu `measure`, ktorý vie robiť štatistické výpočty

	ls ~ *.xml -Recurse | measure

Vo výslednej položke `Count` nájdeme výsledok.

Cmdlet `measure` je aliasom pre `Measure-Object`.

Spočítajte, koľko miesta zaberajú všetky súbory v domovskom adresári
---------------------------
Cmdlet `measure` má parameter `–Sum`, ktorý popri počte položiek vie rátať aj sumy veľkostí. Musíme však určiť, podľa ktorého atribútu sa má sčítavať. Dosiahneme to pomocou prepínača `–Property`.

	ls ~ -Recurse -Force | measure –Property Length -Sum

Každý súbor má atribút `Length` udávajúci jeho veľkosť (adresáre ju majú prázdnu).

Pozn. pre hnidopichov: neberú sa do úvahy skryté súbory a softlinky sa vyhodnotia nesprávne.

Vypíšte len adresáre v domovskom adresári
------------------------------

	ls | where {$_.PSIsContainer}

cmdlet `Where` slúži na filtrovanie. V kučeravých zátvorkách sa nachádza výraz (_expression_) s booleovskou podmienkou. 

Cmdlet `ls` produkuje zoznam objektov. Cmdlet `where` vyhodnotí každý prvok tohto zoznamu, dosadí ho do špeciálnej premennej `$_` a v prípade, že je podmienka splnená, zahrnie ho do výstupného zoznamu. 

Atribút `PSIsContainer` je pravdivý pre adresáre, pre súbory nie.

Cmdlet `where` je aliasom pre `Where-Object`. 

Alternatívny alias je `?`

	ls | ? { $_.PSIsContainer }

Zistite, koľko súborov sa nachádza v domovskom adresári a jeho podadresároch.
---------------------------------------
	
	ls -r | where {-not $_.PSIsContainer} | measure

`-not` je negácia podmienky.

Alternatívne možno použiť výkričník

	ls -r | where {!$_.PSIsContainer} | measure

Alternatívne:
	
	ls -r | where {$_.PSIsContainer -eq $False} | measure

Vypíšte súbory a adresáre v domovskom adresári zotriedené podľa mena
------------------------------

	ls | sort

Tento príkaz robí to isté, čo prostý `ls`, pretože súbory na výstupe sú už štandardne zotriedené podľa mena.

Cmdlet `sort` je alias pre `Sort-Object`.

Vypíšte len súbory zotriedené podľa veľkosti
--------

	ls | where {-not $_.PSIsContainer} | sort Length

Cmdlet `sort` má parameter, v ktorom určíme atribút, podľa ktorého sa má triediť. Triedime podľa veľkosti (`length`).

Alternatívne:

	ls | where {-not $_.PSIsContainer} | sort –Property Length

Vypíšte súbory a adresáre zotriedené podľa veľkosti zostupne.
-----------------------------------

	ls | sort length –Descending

Prepínač možno skrátiť na 

	ls | sort length –desc

Ak sa parameter skráti na `–d`, nastane chyba nejednoznačnosti názvu parametra (pri sorte existujú dva: `-debug` a `–descending`)

Nájdite najväčší súbor v domovskom adresári (nevnárajte sa do podadresárov)
---------------------------------------------

	ls | sort Length -Desc | select -first 1

Cmdlet `select` obvykle filtruje objekty podľa atribútov, ale umožňuje filtrovať prvých/posledných _n_ záznamov. V skutočnosti je to alias pre `Select-Object`.

Vypíšte plné cesty k všetkým súborom a adresárom v aktuálnom adresári
---------------

	ls | select FullName

Nájdite plnú cestu a veľkosť najväčšieho súboru v domovskom adresári vrátane podadresárov.
--------------------

	ls -r | sort length -desc | select FullName, Length -first 1

cmdlet `select` umožňuje špecifikovať atribúty, ktoré sa objavia na výstupe. V tomto prípade vyberáme plnú cestu (`FullName`) a dĺžku (`Length`).

Nájdite plné cesty k všetkým súborom väčším než 20 MB.
-------------------------------

	ls -r | where {$_.length -ge 20MB} | select FullName

Pozor! Porovnanie sa realizuje pomocou `–ge`. Znak `>` znamená presmerovanie a jeho použitie v porovnávaní povedie k chybe, resp. k presmerovaní do súboru s obskúrnym názvom.

Vypíšte súbory a adresáre určené len na čítanie.
----------------------------
Jeden spôsob využíva atribút `Mode`.

	ls | where {$_.Mode -match "r"}

Operátor `–match` využíva regulárne výrazy. Tu stačí povedať, že hľadá prítomnosť podreťazca v reťazci. Ak mode obsahuje v hodnote „r“, súbor je read-only.

Alternatívne:

	ls | where {$_.mode -like "*r*"}

Operátor `–like` funguje podobne ako v databázach, pričom vieme vyhľadávať s použitím žolíkov. 

Alternatívna, ale mylná možnosť je využiť vlastnosť `isReadOnly`; tá však funguje len na súboroch.

Formátovače
===========

Vypíšte názov a plnú cestu k súboru v užšom formáte
---------------------------------------------------

	ls | select Name, FullName | Format-Table -AutoSize

alebo

	ls | select Name, FullName | ft -a

Na konci každej rúry je formátovač, ktorý zapíše objekty v primeranom tvare na konzolu. Ak neuvedieme žiaden formátovač, použije sa zväčša tabuľkový formátovač `Format-Table`.

Parametrom `-AutoSize` nastavíme automatické šírky stĺpcov podľa najširšej položky.

Porovnajte tiež ďalšie formátovače:

*	`Format-Wide` / `fw`: na šírku
*	`Format-List` / `fl`: do zoznamu pod seba.



.NET Framework
===============
Vypočítajte druhú odmocninu z 25
-------------------------------------------

	[Math]::Sqrt(25)

Použime statickú metódu `Sqrt()` na objekte `System.Math`.

Zahrajte štandardný zvuk Pípania vo Windowse
-------------------------------------------
	
	[Media.SystemSounds]::Beep.Play()

Stačí zavolať statickú inštančnú premennú `Beep` na triede `System.Media.SystemSounds`. (Namespace `System` je automaticky importnutý.) 

Premenná `Beep` je typu `System.Media.SystemSound` (ľahko overíme pomocou cmdletu `Get-Member`):

	[Media.SystemSounds]::Asterisk | Get-Member

Na `SystemSound`-e môžeme zavolať metódu `Play()`





Prílohy
=======

Verzie Windowsu a verzie Powershellu
-------------------------------------

Powershell 1.0


Zbytky
======



Zistite adresár, v ktorom sa nachádzajú položky Plochy.
-----------------------------------------------------------
Informáciu možno získať z registrov z položky `HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders`, v kľúči `Desktop`. 

Overte, že sa naozaj v registroch nachádza. Položka je typu expandovateľný reťazec a premenná `%USERPROFILE%` sa automaticky expanduje na správnu hodnotu podľa aktuálne prihláseného používateľa.

	(gi 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders').GetValue("Desktop")

Vytvorte na ploche súbor poznamky.txt
-----------------------------------------------------------

	$DesktopDir = (gi 'HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\User Shell Folders').GetValue("Desktop")
	"" | sc $DesktopDir\poznamky.txt

Stiahnite z PowerShellu súbor http://ics.upjs.sk/~novotnyr/home/skola/systemove_programovanie/mena.txt
-----------------------------------------------------------

	(New-Object System.Net.WebClient).DownloadString("http://ics.upjs.sk/~novotnyr/home/skola/systemove_programovanie/mena.txt") | Set-Content mena.txt


Zistite frekvencie jednotlivých slov v súbore
---------------------------------------------

	gc babel.txt | % { 
	    $_.split() | % { 
	        $_.toLower().Trim() -replace "[^a-z]", "" | ? {$_.Length -ge 0 }
	    }  
	} | Group-Object | Sort Count


*	Vyjdime z cmdletu `Get-Content`, ktorý pošle do rúry jednotlivé riadky súboru. 
*	Každý riadok rozdelíme na slová cez `Split`: vzniknú tým jednotlivé slová, ktoré preiterujeme v podrúre.
*	Každé slovo zhodíme na malé písmená, odsekneme začiatočné a koncové medzery a každé nepísmeno nahradíme prázdnym znakom. Zároveň do rúry pošleme len slová, ktorá po upratovaní majú stále nenulovú dĺžku.
*	Všetky slová zgrupneme cez `Group-Object`, čím získame frekvencie.
*	Tie už len potriedime podľa počtu a sme hotoví.

Vypíšte zoznam fontov v systéme
-------------------------------

	[System.Reflection.Assembly]::LoadWithPartialName("System.Drawing")
	$installedFonts = New-Object System.Drawing.Text.InstalledFontCollection
	$installedFonts.Families | % {$_.Name}

Zistite názvy najčítanejších článkov za posledné 4 hodiny na portáli SME.sk.
----------------------------------------------------------------------------

    $web = New-Object System.Net.WebClient
	$rss = $web.DownloadString("http://rss.sme.sk/rss/rss.asp?id=smenajcit4")
	$xml = [xml] $rss;
	$xml.rss.channel.item | ForEach-Object { $_.title }

Najprv vytvoríme nový objekt pre HTTP klienta, teda inštanciu triedy
`System.Net.WebClient`. Následne stiahneme obsah RSS súboru ako reťazec,
ktorý pretypujeme na XML objekt reprezentovaný typom `xml`.

XML objekt reprezentuje magický strom, kde dokážeme bodkovou notáciou
vchádzať do uzlov a poduzlov. Atribúty z XML, resp. HTML sa v tomto
objekte tiež zjavia ako *properties*, čo môžeme tiež využiť pri bodkovej
notácii.


Zistite kurz českej koruny z http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml
-----------------------------------------------------------------------------------------

	$currency = "CZK"
	$xml = [xml] (New-Object System.Net.WebClient).DownloadString("http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml")
	$xml.Envelope.Cube.Cube.Cube | ? {$_.currency -eq $currency } | select rate

Riešenie je podobné ako pri úlohe s RSS. Všimnime si, že v tomto prípade
vôbec neriešime menné priestory XML.

